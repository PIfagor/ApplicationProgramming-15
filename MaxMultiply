__author__ = 'Wise'


class MaxMultiply:

    #variables
    first_min = 0
    second_min = 0
    third_min = 0

    def __init__(self, nums):
        self.numbers = nums
        if len(nums) < 3:
            print("to little amount of numbers")
            return
        else:
            temp_one = nums[0]
            temp_two = nums[1]
            temp_three = nums[2]
            self.first_max = temp_one
            self.second_max = temp_two
            self.third_max = temp_three
            if temp_one < 0:
                self.first_min = temp_one
            if temp_two < 0:
                self.second_min = temp_two
            if temp_three < 0:
                self.third_min = temp_three
            self.mini_sort()
            self.typeof = 0
        return

    def mini_sort(self):
        if self.first_max < self.second_max:
            temp = self.second_max
            self.second_max = self.first_max
            self.first_max = temp
        if self.second_max < self.third_max:
            temp = self.second_max
            self.second_max = self.third_max
            self.third_max = temp
        if self.first_max < self.second_max:
            temp = self.second_max
            self.second_max = self.first_max
            self.first_max = temp

        if self.first_min > self.second_min:
            temp = self.second_min
            self.second_min = self.first_min
            self.first_min = temp
        if self.second_min > self.third_min:
            temp = self.second_max
            self.second_min = self.third_min
            self.third_min = temp
        if self.first_min > self.second_min:
            temp = self.second_min
            self.second_min = self.first_min
            self.first_min = temp

        return

    def find_max(self, ind):
        temp_max = self.numbers[ind]
        if temp_max > self.first_max:
            self.third_max = self.second_max
            self.second_max = self.first_max
            self.first_max = temp_max
            return
        if temp_max > self.second_max:
            self.third_max = self.second_max
            self.second_max = temp_max
            return
        if temp_max > self.third_max:
            self.third_max = temp_max
            return
        temp_max = self.numbers[ind]
        if temp_max < self.first_min:
            self.second_min = self.first_min
            self.first_min = temp_max
            return
        if temp_max < self.second_min:
            self.second_min = temp_max
            return

    def main_method(self):
        for i in range(3, len(self.numbers)):
            self.find_max(i)

        if self.first_max * self.second_max * self.third_max > self.first_max * self.first_min * self.second_min:
            self.typeof = 0
        else:
            self.typeof = 1
        return


def main():
    numbers = [50, 2, -100, 8, -20, 12]
    x = MaxMultiply(numbers)

    x.main_method()
    print("Max number is:")
    if x.typeof == 0:
        print(x.first_max)
        print(x.second_max)
        print(x.third_max)
        print("Max multiply is:")
        print(x.first_max*x.second_max*x.third_max)
    else:
        print(x.first_max)
        print(x.first_min)
        print(x.second_min)
        print("Max multiply is:")
        print(x.first_max*x.second_min*x.first_min)
    return

if __name__ == "__main__":
    main()
